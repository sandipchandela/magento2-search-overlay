<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magento\Search\Helper\Data as SearchHelper;

// phpcs:disable Magento2.Templates.ThisInTemplate.FoundThis
// phpcs:disable Magento2.Templates.ThisInTemplate.FoundHelper

/** @var Escaper $escaper */
/** @var Template $block */
/** @var SearchHelper $helper */

$helper = $this->helper(SearchHelper::class);
?>


<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('customSearchOverlay', () => ({
            minSearchLength: 2,
            searchOpen: false,
            overLaySection: null,
            suggestions: [],
            matches: {
                categories: [],
                pages: [],
                products: [],
                suggestions: [],
            },
            debounceTimer: null,
            init() {
                console.log('✅ Alpine customSearchOverlay initialized');
                this.overLaySection = document.getElementById('quick-search-overlay');
            },
            debounce(func, wait) {
                return (...args) => {
                    clearTimeout(this.debounceTimer);
                    this.debounceTimer = setTimeout(() => func.apply(this, args), wait);
                };
            },
            fetchResults(event) {
                const query = event.target.value;
                if (!query || query.length < this.minSearchLength) {
                    console.log('⚠️ Query too short');
                    return;
                }

                fetch(
                    window.BASE_URL + 'sandipsearchoverlay/search/ajax?' + new URLSearchParams({ q: query }),
                    { headers: { 'X-Requested-With': 'XMLHttpRequest' }}
                )
                    .then(res => res.json())
                    .then(data => {
                        console.log('✅ Data loaded:', data);
                        this.matches = data;
                        this.openOverlay();
                    })
                    .catch(err => {
                        console.error('❌ Error fetching overlay data', err);
                    });
            },
            applySuggestion(suggestion) {
                const input = document.querySelector('input[type=search]');
                if (input) {
                    input.value = suggestion;
                    this.fetchResults({ target: input });
                }
            },
            openOverlay() {
                document.getElementById('quick-search-overlay').classList.remove('hidden');
            },
            closeOverlay() {
                document.getElementById('quick-search-overlay').classList.add('hidden');
            },
            focusElement(element) {
                if (element && element.nodeName === "DIV") {
                    element.focus();
                    return true;
                } else {
                    return false;
                }
            }
        }));
    });
</script>


<div x-data="customSearchOverlay()" class="sc-search-overlay" @keydown.window.escape="closeOverlay()">
    <div class="container py-2 mx-auto text-black">
        <form class="form minisearch" id="search_mini_form" x-ref="form" @submit.prevent="search()"
              action="<?= $escaper->escapeUrl($helper->getResultUrl()) ?>" method="get" role="search">
            <label class="hidden" for="search" data-role="minisearch-label">
                <span><?= $escaper->escapeHtml(__('Search')) ?></span>
            </label>
            <input id="search"
                   x-ref="searchInput"
                   type="search"
                   autocomplete="off"
                   name="<?= $escaper->escapeHtmlAttr($helper->getQueryParamName()) ?>"
                   value="<?= /** @noEscape */
                   $helper->getEscapedQueryText() ?>"
                   placeholder="<?= $escaper->escapeHtmlAttr(__('Search entire store here...')) ?>"
                   maxlength="<?= $escaper->escapeHtmlAttr($helper->getMaxQueryLength()) ?>"
                   class="w-full p-2 text-lg leading-normal transition appearance-none text-grey-800
                    focus:outline-none focus:border-transparent lg:text-xl"
                   @input="debounce(fetchResults, 300)"
                   @keydown.arrow-down.prevent="focusElement($root.querySelector('[tabindex]'))"
                   @search-open.window.debounce.10="
                        $el.focus()
                        $el.select()
                   "
            />
        </form>
    </div>


    <div class="fixed inset-0 bg-white bg-opacity-90 z-50 p-4 hidden" id="quick-search-overlay">
        <div class="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8">
            <button @click="closeOverlay()"
                    class="absolute top-0 right-0 mt-2 mr-2 text-3xl font-bold text-gray-800 hover:text-black">
                &times;
            </button>

            <div>
                <h3 class="text-lg font-semibold mb-2">Matched Categories & Pages</h3>
                <template x-for="item in matches.categories" :key="item.id">
                    <a :href="item.url" class="block text-blue-600 hover:underline mb-1" x-text="item.name"></a>
                </template>
                <template x-for="item in matches.pages" :key="item.id">
                    <a :href="item.url" class="block text-green-600 hover:underline mb-1" x-text="item.title"></a>
                </template>
            </div>

            <!-- Products -->
            <div>
                <h3 class="text-lg font-semibold mb-2">Products</h3>
                <div class="space-y-2">
                    <template x-for="product in matches.products" :key="'prod-' + product.id">
                        <a :href="product.url"
                           class="flex items-center space-x-2 border p-2 rounded shadow hover:bg-gray-100 transition">
                            <img :src="product.image" class="w-12 h-12 object-contain"/>
                            <div>
                                <div class="text-sm font-bold" x-text="product.name"></div>
                                <div class="text-xs text-gray-600" x-text="product.sku"></div>
                                <div class="text-red-600 font-semibold" x-text="product.price"></div>
                            </div>
                        </a>
                    </template>

                </div>
            </div>

            <!-- Suggestions -->
            <div>
                <h3 class="text-lg font-semibold mb-2">Suggestions</h3>
                <template x-for="suggestion in matches.suggestions" :key="suggestion">
                    <div @click="applySuggestion(suggestion)"
                         @keydown.enter="applySuggestion(suggestion)"
                         @keydown.arrow-up.prevent="
                              focusElement($event.target.previousElementSibling) || $refs.searchInput.focus()
                          "
                         @keydown.arrow-down.prevent="focusElement($event.target.nextElementSibling)"
                         class="cursor-pointer text-gray-800 hover:text-black mb-1"
                         x-text="suggestion"></div>
                </template>
            </div>
        </div>
    </div>

</div>
